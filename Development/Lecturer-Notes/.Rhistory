africa_data_points = data.frame(
lat = rnorm(26, mean = 6.9, sd = 10),
lng = rnorm(26, mean = 17.7, sd = 10),
size = runif(26, 5, 10),
label = letters
)
leaflet(data = africa_data_points) %>%
addTiles()
library(leaflet)
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers(popup = ~label)
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers(popup = ~popup_fun(label))
popup_fun <-function(x){
paste0(
"<p>",x,"</p>",
"<p>foonar</p>"
)
}
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers(popup = ~popup_fun(label))
install.packages("leaflet")
install.packages["keagele"]
library(leaflet)
rep("cats", 4)
rep(
"strings",
{
no1 <- 2
no1 +3
}
)
c("dog","cats")
c(rep(
"cats",
{
no1 <- 2
no1 + 3
}
), "dogs")
c(4, "four")
my_data <- c(4, "four")
my_data2 <- 5
c(my_data, my_data2)
class(my_data)
my_fun <- function(x){
internal_var <- 2 * x
internal_var
}
my_fun(5)
library(leaflet)
leaflet() %>%
addTiles()
"cats" %>% rep(4)
rep("cats", 4)
"cats" %>% paste("too","many", .)
"cats" %>% paste("too", ., "many", .)
letters
leaflet()
leaflet() %>%
addTiles()
leaflet() %>%
addTiles() %>%
addCircleMarkers()
africa_data_points <- data.frame(
lat = rnorm(26, mean = 6.9, sd = 10),
lng = rnorm(26, mean = 17.7, sd = 10),
size = runif(26, 5, 10),
label = letters
)
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers()
africa_data_points
my_fun <- function(data = NA, other.arg = NA){
internal_var <- 2 * data
# return
c(internal_var, other.arg)
}
my_fun(data = 49, other.arg = "martin")
my_fun(49, "martin")
2 + 2 == 5
c(TRUE,FALSE,T,F)
library(WDI)
world_data <- WDI(country=c("GB","EG","SA","EE","CA"), indicator=c("EG.GDP.PUSE.KO.PP","EN.ATM.CO2E.PP.GD.KD","NY.GDP.MKTP.KD"),
start=1990, end=2000)
head(world_data)
wdi_codes <- list(
"EG.GDP.PUSE.KO.PP" = "GDP per unit of energy use (PPP $ per kg of oil equivalent)",
"EN.ATM.CO2E.PP.GD.KD" = "CO2 emissions (kg per 2005 PPP $ of GDP)",
"NY.GDP.MKTP.KD" = "GDP (constant 2000 US$)"
)
library(plotly)
plot_ly(data = world_data,
x = ~year,
y = ~EG.GDP.PUSE.KO.PP,
color = ~country)
str(world_data)
View(world_data)
plot_ly(data = world_data,
x = ~year,
y = ~EG.GDP.PUSE.KO.PP,
color = ~country,
type = "scatter",
mode = "lines") %>%
layout(xaxis = list(title = "Year"))
plot_ly(data = world_data,
x = ~year,
y = ~EG.GDP.PUSE.KO.PP,
color = ~country,
type = "scatter",
mode = "lines") %>%
layout(xaxis = list(title = "Year"),
yaxis = list(title = "foobar"))
world_data %>%
filter(year > 1995)
library(leaflet)
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers() %>%
fitBounds()
library(leaflet)
leaflet(data = africa_data_points) %>%
addTiles() %>%
addCircleMarkers()
library(leaflet)
leaflet(data = africa_data_points) %>%
addWMSTiles("Thunderforest.OpenCycleMap") %>%
addCircleMarkers(popup = ~label)
leaflet(data = africa_data_points) %>%
addProviderTiles("Thunderforest.OpenCycleMap") %>%
addCircleMarkers(popup = ~label)
leaflet(data = africa_data_points) %>%
addProviderTiles("Thunderforest.OpenCycleMap") %>%
addCircleMarkers(popup = ~label, size = ~size)
leaflet(data = africa_data_points) %>%
addProviderTiles("Thunderforest.OpenCycleMap") %>%
addCircleMarkers(popup = ~label, size = ~size)
leaflet(data = africa_data_points) %>%
addProviderTiles("Thunderforest.OpenCycleMap") %>%
addCircleMarkers(popup = ~label, radius = ~size)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("mean",
label = "mean",
min = 1,
max = 10,
value = 5,
step = 2),
textInput("plot_label",
label = "plot label",
value = "my plot")),
mainPanel(plotOutput("hist")))
)
,
server = function(input, output){
hist_data <- eventReactive(input$mean,
{
rnorm(50,
mean = input$mean,
sd = input$mean / 2)
})
output$hist <- renderPlot({
hist(hist_data(),
main = input$plot_label)
})
}
)
library(shiny)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("mean",
label = "mean",
min = 1,
max = 10,
value = 5,
step = 2),
textInput("plot_label",
label = "plot label",
value = "my plot")),
mainPanel(plotOutput("hist")))
)
,
server = function(input, output){
hist_data <- eventReactive(input$mean,
{
rnorm(50,
mean = input$mean,
sd = input$mean / 2)
})
output$hist <- renderPlot({
hist(hist_data(),
main = input$plot_label)
})
}
)
