grepl(pattern = "[0-9]",c("f","g"))
df_exercises_5_1 <- data.frame(
"Var A" <- c(1,2,NA),
"Var B" <- c(1,NA,3)
)
df_exercises_5_1
colnames(df_exercises_5_1)
df_exercises_5_1 <- data.frame(
"Var A" = c(1,2,NA),
"Var B" = c(1,NA,3)
)
colnames(df_exercises_5_1)
library(shiny)
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel = "I'm the sidebar",
mainPanel = "I'm the main panel"
)
),
server <- function(input, output){
}
)
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel = "I'm the sidebar",
mainPanel = wellPanel("I'm the main panel")
)
),
server <- function(input, output){
}
)
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel("I'm the sidebar"),
mainPanel(wellPanel("I'm the main panel"))
)
),
server <- function(input, output){
}
)
shinyApp(
ui <- fluidPage(
sidebarLayout(
sidebarPanel("I'm the sidebar"),
mainPanel(wellPanel("I'm the main panel"))
)
),
server <- function(input, output){
}
)
myFunction <- function(data = NULL, repetitions = NULL){
rep(data, repetititons)
}
myFunction(data = c(1,2), repetitions = 5)
myFunction <- function(data = NULL, repetitions = NULL){
rep(data, repetitions)
}
myFunction(data = c(1,2), repetitions = 5)
myFunction2 <- function(data <- NULL, repetitions <- NULL){
rep(data, repetitions)
}
myFunction2(data = c(1,2), repetitions = 5)
myFunction <- function(data = NULL, repetitions = NULL){
rep(data, repetitions)
}
myFunction(data = c(1,2), repetitions = 5)
myFunction(data = c("cat","dog"), repetitions = 5)
myFunction(data = c("cat","dog"), repetitions = 2)
myFunction <- function(data = NULL, repetitions = NULL){
paste(rep(data, repetitions), sep = " and ")
}
myFunction(data = c("cat","dog"), repetitions = 2)
myFunction <- function(data = NULL, repetitions = NULL){
paste(rep(data, repetitions), collapse = " and ")
}
myFunction(data = c("cat","dog"), repetitions = 2)
globalVector <- as.numeric()
globalVector <- as.numeric()
lapply(c(1,2,3,4,5),
function(x){
globalVector <- append(globalVector, x^2)
print(globalVector)
})
globalVector
c(1,2,3,4,5)^2
globalVector <- as.numeric()
lapply(c(1,2,3,4,5),
function(x){
globalVector <- append(globalVector, x^2)
globalVector
})
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)],
main="Edgar Anderson's Iris Data")
plot(iris$Petal.Length, iris$Petal.Width,
bg=c("red","green3","blue")[unclass(iris$Species)],
main="Edgar Anderson's Iris Data")
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)],
main="Edgar Anderson's Iris Data")
100*table(iris$Species)/nrow(Iris)
dat <- WDI(indicator=c('NY.GDP.PCAP.KD',"BN.CAB.XOKA.GD.ZS"), country=c('MX','CA','US'), start=1960, end=2012)
Image <- readImage('https://en.wikipedia.org/wiki/Google_logo#/media/File:Google_2015_logo.svg')
install.packages("biocLite")
install.packages("EBImage")
install.packages(c("curl", "ggdendro", "gridExtra", "gtable", "htmlwidgets", "openssl", "raster", "RcppEigen", "rgdal", "rmarkdown", "scales", "sp"))
library(shiny)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", choices = c(1,2,3,4,5), selected = 2)
),
function(input, output){
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", choices = c(1,2,3,4,5), selected = 2, label = "exponent")
),
function(input, output){
}
)
shinyApp(
ui = fluidPage(
selectInput("exponent", label = "foo", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^input$exponent), from = -5, to = 5)
}
)
shinyApp(
ui = fluidPage(
selectInput("exponent", label = "foo", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^input$exponent, from = -5, to = 5))
}
)
shinyApp(
ui = fluidPage(
selectInput("exponent", label = "foo", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^as.numeric(input$exponent), from = -5, to = 5))
}
)
shinyApp(
ui = fluidPage(
selectInput("exponent", label = "foo", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^as.numeric(input$exponent), from = -5, to = 5))
}
)
shinyApp(
ui = fluidPage(
selectInput("exponent", label = "foo", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^2, from = -5, to = 5))
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(curve(x^2, from = -5, to = 5))
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
print(input$exponent)
output$curve <- renderPlot(curve(x^2, from = -5, to = 5))
}
)
print(input$exponent)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot(
print(input$exponent)
curve(x^2, from = -5, to = 5)
)
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
print(input$exponent)
curve(x^2, from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^input$exponent, from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^input$exponent, from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^input$exponent, from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent)^as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^as.numeric(input$exponent)/as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^1/as.numeric(input$exponent), from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5),
plotOutput("curve")
),
function(input, output){
output$curve <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("curve"))
)),
function(input, output){
output$curve <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
shinyApp(
ui = navbarPage(
tabPanel("First",fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("exponent"))
))),
tabPanel("Second", fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("other"))
)))
),
server = function(input, output){
output$exponent <- renderPlot({
curve(x^input$exponent, from = -5, to = 5)
})
output$other <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
shinyApp(
ui = navbarPage(
tabPanel("First",fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("exponent"))
))),
tabPanel("Second", fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("other"))
)))
),
server = function(input, output){
output$exponent <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
output$other <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
shinyApp(
ui = navbarPage(
"First navbarPage",
tabPanel("First",fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("exponent"))
))),
tabPanel("Second", fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("other"))
)))
),
server = function(input, output){
output$exponent <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
output$other <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
shinyApp(
ui = navbarPage(
"First navbarPage",
tabPanel("First",fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("exponent"))
))),
tabPanel("Second", fluidPage(
sidebarLayout(
sidebarPanel(wellPanel("Slider for choosing the exponent"),
selectInput("exponent", label = "exponent", choices = 1:5)),
mainPanel(plotOutput("other"))
)))
),
server = function(input, output){
output$exponent <- renderPlot({
curve(x^as.numeric(input$exponent), from = -5, to = 5)
})
output$other <- renderPlot({
curve(x^{1/as.numeric(input$exponent)}, from = -5, to = 5)
})
}
)
